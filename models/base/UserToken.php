<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use Yii;

/**
 * This is the base-model class for table "user_token".
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $token
 * @property string $token_type
 *
 * @property \app\models\Users $user
 * @property \app\models\Venues $venue
 * @property string $aliasModel
 */
abstract class UserToken extends \yii\db\ActiveRecord
{


    /**
    * ENUM field values
    */
    const USER_WEB_TOKEN = 'web';
    const USER_MOBILE_TYPE = 'mobile';
    var $enum_labels = false;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'user_token';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id'], 'integer'],
            [['token', 'token_type'], 'string'],
            ['token_type', 'in', 'range' => [
                    self::USER_WEB_TOKEN,
                    self::USER_MOBILE_TYPE,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User ID',
            'token' => 'Token',
            'token_type' => 'Token Type',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\app\models\Users::className(), ['id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getVenue()
    {
        return $this->hasOne(\app\models\Venues::className(), ['id' => 'venue_id']);
    }


    
    /**
     * @inheritdoc
     * @return \app\models\UsersVenuesFollowsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\models\UsersVenuesFollowsQuery(get_called_class());
    }
    
    /**
     * get column token_type enum value label
     * @param string $value
     * @return string
     */
    public static function getTokenTypeValueLabel($value){
        $labels = self::optsTokenType();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }
    
    /**
     * column token_type ENUM value labels
     * @return array
     */
    public static function optsTokenType()
    {
        return [
            self::USER_WEB_TOKEN => self::USER_WEB_TOKEN,
            self::USER_MOBILE_TYPE => self::USER_MOBILE_TYPE,
        ];
    }


}
